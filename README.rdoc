== Test Case – Eindbeoordeling Ruby on Rails

Het belangrijke aan de opdrachten is de gebruikte methode en techniek, de user interface is minder belangrijk.

De opdracht moet individueel worden uitgevoerd.

Case: Ruby Reservering


== Getting Started

Bouw een simpele, robuste online ticket store voor concerten, evenementen en voorstellingen. Voor elke voorstelling is een beperkt aantal tickets beschikbaar, namelijk 20.

 

• Users kunnen aanmaken met password

• User kan inloggen.

• Tickets kunnen reserveren

• Tickets kunnen betalen via Credit Card

• Credit Card nummers kunnen verifiëren, alleen modulus

• Tickets zijn 15 minuten beschikbaar na reserveren, dan moet er betaald zijn

• Er mogen niet meer tickets verkocht worden dan beschikbaar zijn

• Kunnen inzien welke tickets gereserveerd zijn en welke betaald zijn

• Een gebruiker mag niet meer dan 2 tickets kopen per evenement


==Not achieve goals

  • Credit Card nummers kunnen verifiëren, alleen modulus (problem met routes)

  • Weinig Rspec test gedaan 


== App folder

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |   |   |-- images
  |   |   |-- javascripts
  |   |   `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   |-- assets
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   `-- cache
  |       `-- assets
  `-- vendor
      |-- assets
      |   |-- javascripts
      |   `-- stylesheets
      `-- plugins


